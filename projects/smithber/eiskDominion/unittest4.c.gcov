        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testSupplyCount: testSupplyCount.c dominion.o rngs.o
        -:    6: *      gcc -o testSupplyCount -g  testSupplyCount.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 0
        -:   19:
function main called 1 returned 100% blocks executed 69%
        1:   20:int main() {
        -:   21:    int i;
        1:   22:    int seed = 1000;
        1:   23:    int numPlayer = 2;
        1:   24:    int maxBonus = 10;
        -:   25:    int p, r, handCount;
        -:   26:    int bonus;
        1:   27:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   28:               , remodel, smithy, village, baron, great_hall};
        -:   29:struct gameState G;
        1:   30:r = initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   31:    
        -:   32:#if (NOISY_TEST == 1)
        -:   33:              //  printf("Test player %d with %d treasure card(s) and %d bonus.\n", p, handCount, bonus);
        -:   34:#endif
        -:   35://test when there are cards in game
        1:   36:int supplyC= supplyCount(province,&G);
call    0 returned 100%
        -:   37://printf("supplyC = %d\n",supplyC);
        -:   38:
        1:   39:if(supplyC!=8)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   40:{
    #####:   41:printf("expected 8, result %d\n",supplyC );
call    0 never executed
    #####:   42:return 0;
        -:   43:}
        -:   44:
        -:   45:#if (NOISY_TEST == 1)
        -:   46:                printf("Test supplyCount\n", p, handCount, bonus);
        -:   47:#endif
        -:   48://test when no supply of card in game
        -:   49:   // G.supplyCount[estate] = 12;
        1:   50:supplyC= supplyCount(curse,&G);
call    0 returned 100%
        1:   51:if(supplyC!=10)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   52:{
    #####:   53:printf("expected 10, result %d\n",supplyC );
call    0 never executed
    #####:   54:return 0;
        -:   55:}
        -:   56:    
        1:   57:    printf("All tests passed!\n");
call    0 returned 100%
        -:   58:    
        1:   59:return 0; 
        -:   60:}
