        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 0
        -:   10:
function main called 1 returned 100% blocks executed 78%
        1:   11:int main(){
        -:   12:    int i;
        1:   13:    int seed = 1000;
        1:   14:    int numPlayer = 2;
        1:   15:    int maxBonus = 10;
        -:   16:    int p, r, handCount;
        -:   17:    int bonus;
        1:   18:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   19:               , remodel, smithy, village, baron, great_hall};
        -:   20:
        -:   21://define state; make supplyCount 0; make 3 random supply piles empty
        -:   22:    struct gameState G;
        -:   23:    
        -:   24:    #if (NOISY_TEST == 1)
        -:   25:                printf("Test isGameOver. \n", p, handCount, bonus);
        -:   26:#endif
        -:   27:
        1:   28:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   29:    r = initializeGame(numPlayer, k, seed, &G); //intialize game
call    0 returned 100%
        -:   30:    
        1:   31:    G.supplyCount[province]=0;
        -:   32:        
        1:   33:    int result=isGameOver(&G);
call    0 returned 100%
        -:   34:    
        -:   35:#if (NOISY_TEST == 1)
        -:   36:                printf("G.supplyCount[province] = 0, Result = 1\n");
        -:   37:#endif
        1:   38:                if(result != 1 ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   39:                printf("Error- Game is not over\n");} // check if GameOver 
call    0 never executed
        -:   40:    
        1:   41:  r = initializeGame(numPlayer, k, seed, &G); //intialize game
call    0 returned 100%
        1:   42:    G.supplyCount[5]=0;
        1:   43:    G.supplyCount[2]=0;
        1:   44:    G.supplyCount[8]=0;
        1:   45:    result=isGameOver(&G);
call    0 returned 100%
        -:   46:   // printf("Test 2\n");
        -:   47:#if (NOISY_TEST == 1)
        -:   48:                printf("G.supplyCount[5] = 0, G.supplyCount[2] = 0,G.supplyCount[8] = 0,Result = 0\n");
        -:   49:#endif
        1:   50:                if(result != 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   51:                    printf("Error- Game is not over\n");
call    0 never executed
        -:   52:                } // check if GameOver 
        -:   53:    
        -:   54:
        -:   55://if stakeholder cards is empty, the game ends
        -:   56:
        -:   57://if three supply piles are at 0
        -:   58:    
        1:   59:    r = initializeGame(numPlayer, k, seed,&G); //re-intialize game
call    0 returned 100%
        1:   60:    G.supplyCount[6]=0;
        1:   61:    G.supplyCount[11]=0;
        1:   62:    result=isGameOver(&G);
call    0 returned 100%
        -:   63:   // printf("Test 3\n");
        -:   64:    
        -:   65:    #if (NOISY_TEST == 1)
        -:   66:                printf("G.supplyCount[6] = 0,G.supplyCount[11] = 0, Result = 0\n");
        -:   67:    #endif
        1:   68:    if(result != 0 ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   69:        printf("Error- Game is not over\n");
call    0 never executed
        -:   70:    }; // check if GameOver 
        -:   71:
        1:   72:     r = initializeGame(numPlayer, k, seed, &G); //re-intialize game
call    0 returned 100%
        -:   73:    
        -:   74:    #if (NOISY_TEST == 1)
        -:   75:                printf("G.supplyCount[province] = 0, Result = 0");
        -:   76:    #endif
        1:   77:    if(result != 0 ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   78:        printf("Error- Game is not over\n");
call    0 never executed
        -:   79:    }; // check if GameOver 
        -:   80:    
        1:   81:        printf("All tests passed!\n");
call    0 returned 100%
        1:   82:return 0;
        -:   83:
        -:   84:}
