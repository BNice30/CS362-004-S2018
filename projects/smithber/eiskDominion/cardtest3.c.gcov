        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest4.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest4: cardtest4.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "smithy"
        -:   24:
function main called 1 returned 100% blocks executed 89%
        1:   25:int main() {
        1:   26:    int newCards = 0;
        1:   27:    int discarded = 0;
        1:   28:    int xtraCoins = 0;
        1:   29:    int shuffledCards = 0;
        1:   30:    int xtraActions=0;
        -:   31:    int i, j, m;
        1:   32:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   33:    int remove1, remove2;
        1:   34:    int seed = 1000;
        1:   35:    int numPlayers = 2;
        1:   36:    int thisPlayer = 0;
        -:   37:	struct gameState G, testG;
        1:   38:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   39:			sea_hag, tribute, smithy, council_room};
        -:   40:
        -:   41:	// initialize a game state and player cards
        1:   42:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   43:
        1:   44:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   45:
        -:   46:	// ----------- TEST 1: choice1 = 1 = +2 cards --------------
        1:   47:	printf("TEST 1:+3 cards, +1 discard\n");
call    0 returned 100%
        -:   48:
        -:   49:	// copy the game state to a test case
        1:   50:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   51:	choice1 = 1;
        1:   52:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   53:
        1:   54:	newCards = 3;
        1:   55:	xtraCoins = 0;
        1:   56:        xtraActions=0;
        1:   57:        discarded=1;
        -:   58:    
        1:   59:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
call    0 returned 100%
        1:   60:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
        1:   61:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
call    0 returned 100%
        1:   62:    printf("actions = %d, expected = %d\n", testG.numActions, G.numActions + xtraActions);
call    0 returned 100%
        -:   63:	    
        1:   64:    if(testG.handCount[thisPlayer] != G.handCount[thisPlayer] + newCards - discarded){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   65:        printf("Error- handCount incorrect\n");
call    0 returned 100%
        -:   66:    }
        -:   67:	
        1:   68:    if(testG.deckCount[thisPlayer] != G.deckCount[thisPlayer] - newCards + shuffledCards){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   69:        printf("Error- deckCount incorrect\n");
call    0 returned 100%
        -:   70:    }
        -:   71:	
        1:   72:    if(testG.coins != G.coins + xtraCoins){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   73:        printf("Error- amount of coins\n");
call    0 never executed
        -:   74:    }
        -:   75:    
        1:   76:    if(testG.numActions!=G.numActions + xtraActions){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   77:        printf("Error- number of actions incorrect\n");
call    0 never executed
        -:   78:    }
        -:   79:
        1:   80:	return 0;
        -:   81:    
        -:   82:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   83:}
