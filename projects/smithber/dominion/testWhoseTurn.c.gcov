        -:    0:Source:testWhoseTurn.c
        -:    0:Graph:testWhoseTurn.gcno
        -:    0:Data:testWhoseTurn.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testUpdateCoins: testWhoseTurn.c dominion.o rngs.o
        -:    6: *      gcc -o testUpdateCoins -g  testWhoseTurn.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:
function main called 1 returned 100% blocks executed 83%
        1:   20:int main() {
        -:   21:    int i;
        1:   22:    int seed = 1000;
        1:   23:    int numPlayer = 2;
        1:   24:    int maxBonus = 10;
        -:   25:    int p, r, handCount;
        -:   26:    int bonus;
        1:   27:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   28:               , remodel, smithy, village, baron, great_hall};
        -:   29:   struct gameState G;
        -:   30:
        -:   31:#if (NOISY_TEST == 1)
        1:   32:                printf("Test player %d with %d treasure card(s) and %d bonus.\n", p, handCount, bonus);
call    0 returned 100%
        -:   33:#endif
        1:   34:    G.whoseTurn=0;
        -:   35://cost of copper
        1:   36:int turn =whoseTurn(&G);
call    0 returned 100%
        -:   37:    #if (NOISY_TEST == 1)
        1:   38:                printf("player 2 turn, turn==0\n");
call    0 returned 100%
        -:   39:#endif
        1:   40:assert(turn==0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   41:    
        1:   42:    G.whoseTurn=1;
        1:   43:     turn= whoseTurn(&G);
call    0 returned 100%
        -:   44:#if (NOISY_TEST == 1)
        1:   45:                printf("player 1 turn, turn==1\n");
call    0 returned 100%
        -:   46:#endif
        1:   47:    assert(turn==1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   48:                       
        1:   49:printf("All tests passed!\n");
call    0 returned 100%
        1:   50:return 0;
        -:   51:  }
